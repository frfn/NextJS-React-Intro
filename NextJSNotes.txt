Next JS
    A library building up on React, it is still React.

    Enforces a folder structure
    Gives server side rendering right outside the box--no need to configure anything behind the scenes
        - makes creating React components more conveniant and easier
        - server side rendering is an interesting part which we probably don't need, it is helpful if you want app to be found in search engines

    This is a framework where the back end is all set for use and making static websites easier to create.
    Minimalistic framework for server-rendered React app
        server side rendering:
            user enters url that leads to my react app, 
            it will pre-render that page on the server so that the server returns the pre-rendered html code

    Static websites VS Dynamic websites:
        - static: fixed and display the same content for every user
        - dyanmic: can display different content and provide user interaction, by making use of advanced programming and databases

1. Server Side Rendering (SSR)
    
           --First Page Load-->
    CLIENT                      SERVER (server would typically ship index.html file + code! then gets loaded as SPA on Browser Client)
          \                       |
             \                    |
                \                 | Fetch & Render React App (step between the response, for rendering react app, the application will be sent back)
                   \              | Instead of the client(browser) rendering the SPA, what's coming back to the client, IS a SPA, it doesnt not have to render
                      \           V
                         \  React App Code  (Returns rendered First Page + React App Bundle)

    side effects using this:
        Since the page returns code to be rendered, crawler might have a hard to understanding.
        Since SSR, the page that will be returned will be the app, instead of code to be rendered, so the crawler will have a better time understanding

    Initial page load is important


Next JS helps us with SSR, since SSR is tricky to set up. Accept it. Not your job.
    - Additionally, gives a strict folder structure for good practice!


HANDS ON:
    https://nextjs.org/learn/basics/create-nextjs-app

    Follow the steps and see what the boiler plate is!

    1. explored <Link> and Router.push()
    2. Components? Nope. Still do the same.

    CSS?

    1. You can use inline, Radium, etc, but not CSS modules (we can't access the webpack config that nextjs uses)
    2. Use <style>
    
    <style style>
        {`
            ...uses styled-jsx for isolated scoped CSS
        `}
    </style>

    Handling 404?

    1. Custom ERROR HANDLING
        unknown routes will lead to 404 | This page could not be found

    LifeCycle Hook ** important feature.
        class based components

        static async getInitialProps(context) { 
            ... 
            return {}
        };

        in Google Dev Tools, console.log is NOT seen, but seen in the terminal!
            - code is executed on the Server first,
            - to grab the content IN the Dev Tool, you must click INTO the component, if refreshed, you will not see it.

        in getInitialProps, you can fetch data from a database first then pre populate! the props!      

        Look @ the index.js for /auth and /src folder!! They contain the .getInitialProps() LifeCycle hook (only for NextJS!)
        - Pretty cool!
        - Works for both FN & class component!        

    Deployment!
        npm run build
        you would Deploy the WHOLE src folder
        deploy in AWS elastic bean stalk or Horoku, need a host that needs to run NodeJS, NextJS only works on NodeJS and uses NodeJS
        All files that is shipped is JS files!!!

        npm start!!

    Notes:
        - file-system in main api, we don't use React Router if nextjs is used, we create folder and files to reflect our sources
        - comes with code split = lazy loading (ie. <Link>)
        - /pages is the important folder for next.js, it does routing, code splitting + can contain normal code/components etc!
            code splitting is automatic, only if you visit /pages/auth is when components/user.js will be rendered
            pretty kewl
        - Next.js has a pretty cool tutorial to learn how to use it!